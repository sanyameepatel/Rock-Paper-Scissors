pragma solidity ^0.5.8;
contract contract_rps
{
    mapping (string => mapping(string => int)) payoffMatrix;
    address payable public player1;
    address payable public player2;
    bytes32 public player1ChoiceHash;
    bytes32 public player2ChoiceHash;
    string public player1Choice;
    string public player2Choice;
    uint firstRevealTime;
    //address payable deposit;
    uint public balanceofcontract = address(this).balance;
    uint depositAmount;
    address public winnerAddr;
    
    event registerplayer(address _player);
    event commithand(address _player, string choice);
    event revealhand(address _player, string choice);
    event declarewinner(address _player);
    
    constructor (contract_rps) public 
    {   // constructor
        payoffMatrix["rock"]["rock"] = 0;
        payoffMatrix["rock"]["paper"] = 2;
        payoffMatrix["rock"]["scissors"] = 1;
        payoffMatrix["paper"]["rock"] = 1;
        payoffMatrix["paper"]["paper"] = 0;
        payoffMatrix["paper"]["scissors"] = 2;
        payoffMatrix["scissors"]["rock"] = 2;
        payoffMatrix["scissors"]["paper"] = 1;
        payoffMatrix["scissors"]["scissors"] = 0;
    }
    

    function() external payable
    {
        register();
    }

    
    function register() public payable
    {
        require(1 ether <= msg.value, "Not enough deposit provided");
        
        //deposit.transfer(msg.value);
        if (uint(player1) == 0)
        {
            player1 = msg.sender;
            depositAmount = uint(msg.value);
            emit registerplayer(player1);
        }
        else if (uint(player2) == 0)
        {   
            player2 = msg.sender;
            require(uint(msg.value)>=depositAmount);
            emit registerplayer(player1);
        }
        else
            revert("Players have already registered");
       // require(uint(gasleft())>=100000);
    }

    function play(string memory choice, string memory randStr) public
    {
        //Check if the player is registered
        require(msg.sender == player1 || msg.sender == player2);
        require(keccak256(abi.encodePacked(choice))==keccak256(abi.encodePacked("rock")) || keccak256(abi.encodePacked(choice))==keccak256(abi.encodePacked("paper")) || keccak256(abi.encodePacked(choice))==keccak256(abi.encodePacked("scissors")));

        if (msg.sender == player1)
            player1ChoiceHash = keccak256(abi.encodePacked(choice, randStr));
        else if (msg.sender == player2)
            player2ChoiceHash = keccak256(abi.encodePacked(choice, randStr));
    }
    
    function reveal(string memory choice, string memory randStr) public
    {
        require (msg.sender == player1 || msg.sender == player2);
        
        require(keccak256(abi.encodePacked(choice))==keccak256(abi.encodePacked("rock")) || keccak256(abi.encodePacked(choice))==keccak256(abi.encodePacked("paper")) || keccak256(abi.encodePacked(choice))==keccak256(abi.encodePacked("scissors")));

        // second player has 120 seconds after first player revealed
        if (bytes(player1Choice).length == 0 && bytes(player2Choice).length == 0)
            firstRevealTime == now;

        // if hashed choice + randStr is matching the initial one, choice is stored
        if (msg.sender == player1 && keccak256(abi.encodePacked(choice, randStr)) == player1ChoiceHash)
            player1Choice = choice;
        if (msg.sender == player2 && keccak256(abi.encodePacked(choice,randStr)) == player2ChoiceHash)
            player2Choice = choice;
        
    }
    
    function checkWinner() public
    {
        if (bytes(player1Choice).length != 0 && bytes(player2Choice).length != 0)
        {
            // if both revealed, obtain winner in usual way
            int winner = payoffMatrix[player1Choice][player2Choice];
            uint award = address(this).balance;
          
            if (winner == 1)
            {
                player1.transfer(award);
                winnerAddr = player1;
            }
            else if (winner == 2)
            {
                player2.transfer(award);
                winnerAddr = player2;
            }
            else
            {
                award = address(this).balance;
                player1.transfer(award/2);
                award = address(this).balance;
                player2.transfer(award);
            }

            // unregister players and choices
            player1Choice = "";
            player2Choice = "";
            player1 = address(0);
            player2 = address(0);
        }
        else if (now > firstRevealTime + 240)
        {
            uint award = address(this).balance;
            // if only one player revealed and time > start + timeout, winner is the one who revealed first
            if (bytes(player1Choice).length != 0)
            {
                player1.transfer(award);
                winnerAddr = player1;
            }
            else if (bytes(player2Choice).length != 0)
            {    
                player2.transfer(award);
                winnerAddr = player2;
            }
        }
    }

    function checkIfPlayer1() view public returns(bool x){
        return msg.sender == player1;
    }
    
    
    function checkIfPlayer2() view public returns(bool x){
        return msg.sender == player2;
    }
}
